swirl()
install.packages("swirl")
library("swirl")
?rnorm
args("rnorm")
rnorm
lm
lapply
1
a <- available.packages()
head(rownames(a),3)
install.packages("slidify")
install.packages(c("slidify","ggplot2","devtools"))
source("http://bioconductor.org/biocLite.R")
biocLite(c("GenomicFeatures,"AnnotationDbi""))
biocLite(c("GenomicFeatures","AnnotationDbi))
biocLite(c("GenomicFeatures","AnnotationDbi"))
library(ggplot2)
search()
install.packages("KernSmooth")
library(KernSmooth)
swirl()
install.packages("swirl")
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<- c(1.1,9,3.14)
?c()
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
swirl()
exit
swirl()
install.packages("swirl")
library("swirl")
swirl()
getwd()
ls()
x<-9
ls()
list.files()
?list.files
args(list.files)
old.dir<-getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.file()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
filerename("mytest.R","mytest2.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dircreate("testdir2") file.path("testdir2","testdir3")
dir.create("testdir2") file.path("testdir2","testdir3")
dir.create("testdir2") and file.path("testdir2","testdir3")
dir.create("testdir2"), file.path("testdir2","testdir3")
list.dir()
dir.create("testdir2", file.path("testdir2","testdir3")
)
dir.create("testdir2", TRUE, file.path("testdir2","testdir3"))
info()
dir.create(filepath("testdir","testdir3"),recursive=TRUE)
dir.create(file.path("testdir","testdir3"),recursive=TRUE)
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
unlink("testdir2",recursive=TRUE)
setwd("old.dir")
setwd(old.dir)
unlink("test.dir",recursive=TRUE)
unlink("testdir",recursive=TRUE)
swirl()
getwd()
ls()
x<-9
ls()
list.files()
?list.files
args(list.files)
old.dir<.getwd()
old.dir<-getwd()
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
filerenam("mytest.R","mytest2.R")
file.rename("mytest.R","mytest2.R")
file.copy("Mytest2.R","mytest3.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create(filepath("testdir2","testdir3"),recursive=TRUE)
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
unlink("tesdir2",recursive=TRUE)
unlink("testdir2",recursive=TRUE)
setwd(old.dir)
unlink("testdir",recursive=TRUE)
install_from_swirl("Getting and Cleaning Data")
library("swirl")
install_from_swirl("Getting and Cleaning Data")
swirl()
bye()
library(xlsx)
install.packeages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("xlsxjars")
library(xslx)
library(xlsx)
library(RJava)
q()
install.packages("RMySql")
install.packages("RMySQl")
install.packages("RMySQL")
library(RMySQL)
install.packages("DBI")
install.packages("DBI")
library(DBI)
library(RMySQL)
ucscDb<-dvConnect(MySQL(),user"genome", host="genome-mysql.cse.ucsc.edu")
ucscDb<-dbConnect(MySQL(),user"genome", host="genome-mysql.cse.ucsc.edu")
ucscDb<-dbConnect(MySQL(),user="genome", host="genome-mysql.cse.ucsc.edu")
result<-dbGetQuery(ucscDb,"show databases;");dbDisconnect(ucscDb);
resukt
result
hg19<- dbConnect(MySQL(),user="genome",db="hg19",host="genome-mysql.cse.ucsc.edu")
allTables<-dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"select count(*) affyU133Plus2")
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
affyData<-dbReaTable(hg19,"affyU133Plus2")
affyData<-dbReadTable(hg19,"affyU133Plus2")
affyData<-dbReadTable(hg19,"affyU133Plus2")
head(affyData)
query<- dbSendQuery(hg19,"slect *from affyU133Plus 2 where misMatches between 1 and 3")
query<- dbSendQuery(hg19,"slect * from affyU133Plus 2 where misMatches between 1 and 3")
query<- dbSendQuery(hg19,"select * from affyU133Plus 2 where misMatches between 1 and 3")
query<- dbSendQuery(hg19,"select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
?fetch
affyMisSmall <- fetch(query, n=10); dbClearResult(query);
dim(affyMisSmall)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.r")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created=h5createFile("example.h5")
created
created=h5createFile("example.h5","foo")
created=h5createFile("example.h5","foo")
created=h5createGroup("example.h5","foo")
library(RMySQL)
q()
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode=readlines(con)
htmlCode=readLines(con)
close(con)
htmlCode
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode=readLines(con)
library(XML)
html<-htmlTreeParse(url,useInternalNodes=T)
xpathSApply(html,"//title",xmlValue)
url<-"http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html<-htmlTreeParse(url,useInternalNodes=T)
xpathSApply(html,"//title",xmlValue)
xpathSApply(html,"//td[@id'col-citedby']")
xpathSApply(html,"//td[@id='col-citedby']")
xpathSApply(html,"//td[@id='col-citedby']",xmlValue)
html<-htmlTreeParse(url,useInternalNodes=T)
xpathSApply(html,"//title",xmlValue)
xpathSApply(html,"//td[@id='col-citedby']",xmlValue)
library(httr)
html2=GET(url)
content2=content(html2,as="text")
parsedHTML = htmlParse(content2,asText=T)
xpathSApply(parseHtml.//title",xmlValue")
xpathSApply(parseHtml,"//title",xmlValue")
xpathSApply(parseHtml,"//title",xmlValue)
xpathSApply(parseHtml,"//title",xmlValue)
xpathSApply(parsedHtml,"//title",xmlValue)
xpathSApply(parsedHtml,"//title",xmlValue)
xpathSApply(parsedHTML,"//title",xmlValue)
pg1=GET("http://httpbin.org/basic-auth/user/passwd",authenticate("user","passwd"))
pg1
names(pg1)
dim(pg1)
class(pg1)
libray(XML)
library(XML)
url<-"http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html<-htmlTreeParse(url,UseInternalNodes=T)
html<-htmlTreeParse(url,useInternalNodes=T)
xpathSApply(html,"//title",xmlValue)
xpathSApply(html,"//td[@id='col-citedby']",xmlValue)
xpathSApply(html, "//td[@id='col-cited']",xmlValue)
xpathSApply(html, "//td[@id='cited']",xmlValue)
xpathSApply(html, "//td[@i='cited']",xmlValue)
xpathSApply(htm, "//td[@i='cited']",xmlValue)
xpathSApply(htm, "//td[@i=cited]",xmlValue)
xpathSApply(htm, "//td[@id=cited]",xmlValue)
url<-"http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
xpathSApply(html,"//td[@id='col-citedby']",xmlValue)
url<-"http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
q()
library(jsonlite)
install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
cube <- function(x, n) {
x^3
}
cube
cube(3)
cube(3,2)
q()
getwd("DataScience")
setwd("DataScience")
getPIB()
source('~/DataScience/Quizz3 Quesion1.R')
getPIB()
library(Hmisc)
mergedPIBs$x =cut2(mergedPIBs$Ranking,g=5)
mergePIBs
getPIB()
source('~/DataScience/Quizz3 Quesion1.R')
getPIB()
?table
source('~/DataScience/Quizz3 Quesion1.R')
getPIB()
source('~/DataScience/Quizz3 Quesion1.R')
getPIBs(1)
source('~/DataScience/Quizz3 Quesion1.R')
getPIB(1)
getPIB(2)
source('~/DataScience/Quizz3 Quesion1.R')
getPIB(1)
getPIB(2)
source('~/DataScience/Quizz3 Quesion1.R')
getPIB(2)
source('~/DataScience/Quizz3 Quesion1.R')
getPIB(1)
?print
source('~/DataScience/Quizz3 Quesion1.R')
getPIB(1)
source('~/DataScience/Quizz3 Quesion1.R')
getPIB(1)
getPIB(1)
source('~/DataScience/Quizz3 Quesion1.R')
dir()
setwd("project")
dir()
setwd("UCI HAR Dataset")
dir()
View(README.txt)
read.table("README.txt")
View("README.txt")
setwd("test")
ls()
list.files()
?read.fwf
testX<-read.fwf("X_tes.txt",widths=c(16,16,16,16,16))
testX<-read.fwf("X_test.txt",widths=c(16,16,16,16,16))
head(testX)
tail(testX)
testY<-read.fwf("Y_test.txt",widths=c(16,16,16,16,16))
testY
testY<-read.fwf("Y_test.txt",widths=c(1))
class(testY)
dim(testY)
dim(testX)
testX$subject<-testY
head(testX)
testSubject<-read.fwf("subject_test.txt",widths=c(2))
dim(testSubject)
testX$subject2<-testSubject
textX
testX
tail(testX)
head(testX)
testY<-read.fwf("Y_test.txt",widths=c(16,16,16,16,16),sep="")
testX<-read.fwf("X_tes.txt",widths=c(16,16,16,16,16),sep="")
testX<-read.fwf("X_test.txt",widths=c(16,16,16,16,16),sep="")
head(testX)
testX<-read.table("X_test.txt")
head(testX)
q()
